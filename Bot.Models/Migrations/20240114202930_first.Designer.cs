// <auto-generated />
using System;
using EgeBot.Bot.Models.db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EgeBot.Migrations
{
    [DbContext(typeof(BotDbContext))]
    [Migration("20240114202930_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EgeBot.Bot.Models.Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Complexity")
                        .HasColumnType("integer")
                        .HasColumnName("complexity");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("correct_answer");

                    b.Property<string>("PathToDownload")
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<long>("TopicId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("EgeBot.Bot.Models.TaskKim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("task_kim");
                });

            modelBuilder.Entity("EgeBot.Bot.Models.Theory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<long>("TopicId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("theory");
                });

            modelBuilder.Entity("EgeBot.Bot.Models.Topic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("TaskKimId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("TaskKimId");

                    b.ToTable("topic");
                });

            modelBuilder.Entity("EgeBot.Bot.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nick_name");

                    b.Property<int>("SettingComplexity")
                        .HasColumnType("integer")
                        .HasColumnName("complexity");

                    b.Property<long?>("topicId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("topicId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("EgeBot.Bot.Models.UserTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaskcId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserAnswer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_answer");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("TaskcId");

                    b.ToTable("user_task");
                });

            modelBuilder.Entity("EgeBot.Bot.Models.Task", b =>
                {
                    b.HasOne("EgeBot.Bot.Models.Topic", "Topic")
                        .WithMany("Tasks")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("EgeBot.Bot.Models.Theory", b =>
                {
                    b.HasOne("EgeBot.Bot.Models.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("EgeBot.Bot.Models.Topic", b =>
                {
                    b.HasOne("EgeBot.Bot.Models.TaskKim", "TaskKim")
                        .WithMany("Topics")
                        .HasForeignKey("TaskKimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskKim");
                });

            modelBuilder.Entity("EgeBot.Bot.Models.User", b =>
                {
                    b.HasOne("EgeBot.Bot.Models.Topic", "SettingTopic")
                        .WithMany()
                        .HasForeignKey("topicId");

                    b.Navigation("SettingTopic");
                });

            modelBuilder.Entity("EgeBot.Bot.Models.UserTask", b =>
                {
                    b.HasOne("EgeBot.Bot.Models.User", "User")
                        .WithMany("UserTasks")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EgeBot.Bot.Models.Task", "Task")
                        .WithMany("UserTasks")
                        .HasForeignKey("TaskcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EgeBot.Bot.Models.Task", b =>
                {
                    b.Navigation("UserTasks");
                });

            modelBuilder.Entity("EgeBot.Bot.Models.TaskKim", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("EgeBot.Bot.Models.Topic", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("EgeBot.Bot.Models.User", b =>
                {
                    b.Navigation("UserTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
